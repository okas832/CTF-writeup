# calling diagram
# wmemchr3
#   wcspbrk2 - create table
#   jn - strange encryption(maybe variant of RC4?) with table
#   strpbrk3, strerror3, vfprintf3, iscntrl - one more strange encryption(Spritz?) with table
# atexit3, swprintf2, iswprint2, _strrchr2 - compare between encrypted data and constant value

# memory dump of table which wcspbrk2 made 
a = """0x555555fc2d60:    0x05    0xc4    0x1f    0xe3    0xdf    0x61    0xed    0x69
0x555555fc2d68:    0xaa    0x18    0x4b    0x63    0x46    0x29    0x9a    0xa5
0x555555fc2d70:    0x21    0xfd    0xae    0x4d    0x9e    0xdb    0xbb    0x2c
0x555555fc2d78:    0x80    0xe0    0x84    0xa7    0x6e    0xd9    0x92    0xb2
0x555555fc2d80:    0xc6    0x5c    0x99    0xff    0x9d    0x3b    0x10    0x9f
0x555555fc2d88:    0x22    0x7b    0x4f    0x0d    0x40    0x4c    0xe2    0xfc
0x555555fc2d90:    0x1a    0x87    0xdc    0x23    0xab    0x5e    0x79    0xcf
0x555555fc2d98:    0xe7    0x7a    0x31    0xee    0xf3    0xeb    0x19    0x26
0x555555fc2da0:    0x14    0x5a    0x0c    0x38    0xca    0xd2    0x08    0x91
0x555555fc2da8:    0xd1    0x12    0xde    0x32    0x56    0x51    0xe9    0xea
0x555555fc2db0:    0xe6    0x11    0xcc    0xe4    0x45    0x0e    0x82    0xf6
0x555555fc2db8:    0x98    0xfa    0x9c    0xda    0xaf    0x3a    0x66    0x27
0x555555fc2dc0:    0xa6    0x83    0x72    0x7e    0x15    0xa8    0xbd    0x03
0x555555fc2dc8:    0x3d    0x74    0x6f    0x62    0x50    0x8d    0x48    0x0b
0x555555fc2dd0:    0x4a    0xcd    0xf1    0x58    0x3f    0x81    0xef    0x53
0x555555fc2dd8:    0x47    0xc7    0xf9    0x13    0x93    0xdd    0x6b    0xec
0x555555fc2de0:    0x6d    0x0f    0x7c    0xf5    0x8f    0xba    0x96    0xd4
0x555555fc2de8:    0x71    0xa4    0xbf    0x28    0x04    0xc0    0xc1    0x8b
0x555555fc2df0:    0x54    0xf0    0x90    0xc9    0xa9    0x60    0xb4    0x97
0x555555fc2df8:    0xc3    0x44    0x02    0x68    0xd5    0x8a    0x36    0x76
0x555555fc2e00:    0xa1    0x65    0x94    0x1b    0xa3    0xcb    0x6c    0xad
0x555555fc2e08:    0x30    0x43    0xac    0x35    0xe1    0x01    0x33    0xd8
0x555555fc2e10:    0x73    0x77    0xd0    0x07    0xf7    0x78    0x37    0x41
0x555555fc2e18:    0xc8    0x17    0x6a    0x95    0xb8    0xd7    0x2f    0x09
0x555555fc2e20:    0xfb    0x4e    0x59    0xb9    0xd3    0xb6    0xc2    0x64
0x555555fc2e28:    0x1c    0x34    0x1d    0xbe    0x3e    0x25    0x20    0xd6
0x555555fc2e30:    0x2a    0x00    0x7f    0xce    0x5b    0x49    0xe8    0x55
0x555555fc2e38:    0x7d    0x2e    0xc5    0x3c    0xf4    0x67    0x5f    0x0a
0x555555fc2e40:    0x52    0x39    0xa2    0xb1    0x75    0xf2    0xb0    0x2d
0x555555fc2e48:    0x1e    0x9b    0x70    0xb5    0x86    0x88    0x8c    0x5d
0x555555fc2e50:    0xb7    0x06    0xb3    0xe5    0x2b    0x8e    0xa0    0x57
0x555555fc2e58:    0xfe    0xf8    0x89    0x16    0x85    0x42    0xbc    0x24"""

lst = []
for i in a.split("\n"):
    i = i.split("    ")[1:]
    i = list(map(lambda x: int(x, 16), i))
    lst = lst + i
# jn
# some random input, input does not affects the encryption flow.
ipt = list(b"asdf" * (16))

K = [0 for _ in range(0x100)]
bef = 0

log = []
# if we know where and what value is xor-ed to, we can simply reverse the process

for i in range(256):
    v5 = lst[i]
    v6 = (v5 + bef + K[i]) & 0xFF
    if v6 != i:
        lst[v6], lst[i] = lst[i], lst[v6]
        
    if i ^ v6 > 3:
        ipt[i >> 2] ^= ipt[v6 >> 2]
    ipt[i >> 2] = i ^ ipt[i >> 2];
    ipt[v6 >> 2] ^= v6
    bef = v6

    log.append((i, v6)) # log 1

# strpbrk3, strerror3, vfprintf3, iscntrl
bef = [0, 0, 0, 0]
log2 = []

S = lst
for i in range(64):
    v2 = (bef[1] + 5) & 0xFF
    v3 = S[v2]
    v4 = (bef[3] + S[(bef[2] + v3) & 0xFF]) & 0xFF
    v5 = v4
    v6 = S[v5]
    v7 = (v2 + v6 + bef[3]) & 0xFF
    S[v2] = v6
    S[v5] = v3
    v8 = S[(v4 + S[(v2 + S[(v7 + bef[0]) & 0xFF]) & 0xFF]) & 0xFF]
    bef = [v8, v2, v4, v7]

    log2.append(bef) # log 2
    ipt[i] = (5889 * ((bef[0] ^ ipt[i]) + 2 * (bef[0] & ipt[i])) + 3584) & 0xFF


# atexit3, swprintf2, iswprint2, _strrchr2
# 64 hand copy? no problem
ans = [0x100 - 0x73, # a3 + 0x73
       0x6D,         # a3 - 0x6D
       0x100 - 82,   # a3 + 82
       0x53,         # a3 ^ 0x53
       0xB5,         # a3 ^ 0xB5
       39,           # (a3 | 0xD9) + (a3 | 0x26) - 38
       0xf,          # a3 ^ 0xF
       0x31,         # a3 ^ 0x31
       0xE2,         # a3 ^ 0xE2
       0x6E,         # a3 ^ 0x6E
       18,           # (a3 | 0xEE) + (a3 | 0x11) - 17
       245,          # (a3 | 0xB) + (a3 | 0xF4) + 12
       75,           # a3 - 75
       130,          # (a3 | 0x7E) + (a3 | 0x81) + 127
       20,           # a3 - 20
       68,           # (a3 | 0xBC) + (a3 | 0x43) - 67

       0x100 - 24,   # a3 + 24
       0xC7,         # a3 ^ 0xC7
       32,           # a3 - 32
       0xEF,         # a3 ^ 0xEF
       33,           # (a3 | 0xDF) + (a3 | 0x20) - 32
       12,           # (a3 | 0xF4) + (a3 | 0xB) - 11
       0x3D,         # a3 ^ 0x3D
       0x1B,         # a3 ^ 0x1B
       22,           # (a3 | 0xEA) + (a3 | 0x15) - 21
       132,          # (a3 | 0x7C) + (a3 | 0x83) + 125
       0x91,         # a3 ^ 0x91
       245,          # (a3 | 0xB) + (a3 | 0xF4) + 12
       0x89,         # a3 ^ 0x89
       0xD1,         # a3 ^ 0xD1
       27,           # (a3 | 0xE5) + (a3 | 0x1A) - 26
       0x100 - 122,  # a3 + 122

       0x8A,         # a3 ^ 0x8A
       0xEF,         # a3 ^ 0xEF
       0xAD,         # a3 ^ 0xAD
       242,          # (a3 | 0xE) + (a3 | 0xF1) + 15
       0xDA,         # a3 ^ 0xDA
       0x100 - 53,   # a3 + 53
       88,           # (a3 | 0xA8) + (a3 | 0x57) - 87
       0x100 - 46,   # a3 + 46
       0xB0,         # a3 ^ 0xB0
       81,           # a3 - 81
       0x2A,         # a3 ^ 0x2A
       0x63,         # a3 ^ 0x63
       0x93,         # a3 ^ 0x93
       198,          # (a3 | 0x3A) + (a3 | 0xC5) + 59
       0xE7,         # a3 ^ 0xE7
       0xB0,         # a3 ^ 0xB0

       0x11,         # a3 ^ 0x11
       0x100 - 103,  # a3 + 103
       0x100 - 107,  # a3 + 107
       243,          # (a3 | 0xD) + (a3 | 0xF2) + 14
       53,           # a3 - 53
       0xE,          # a3 ^ 0xE
       0xD1,         # a3 ^ 0xD1
       0x58,         # a3 ^ 0x58
       0x84,         # a3 ^ 0x84
       0x7C,         # a3 ^ 0x7C
       0x55,         # a3 ^ 0x55
       81,           #(a3 | 0xAF) + (a3 | 0x50) - 80
       0x100 - 73,   # a3 + 73
       0xCF,         # a3 ^ 0xCF
       0x100 - 89,   # a3 + 89
       0x57]         # a3 ^ 0x57

# reverse second encryption
for i in range(64):
    for j in range(256):
        if ans[i] == (5889 * ((log2[i][0] ^ j) + 2 * (log2[i][0] & j)) + 3584) & 0xFF:
            break
    ans[i] = j

# reverse first encryption
for j in range(255, -1, -1):
    i, v6 = log[j]

    ans[v6 >> 2] ^= v6
    ans[i >> 2] ^= i
    if i ^ v6 > 3:
        ans[i >> 2] ^= ans[v6 >> 2]

print(bytes(ans))

       
       
       
       
       
       
       

    
